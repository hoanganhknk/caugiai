import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static List<Integer> shortestReach(int n, List<List<Integer>> edges, int s) {
    // Write your code here
        List<Integer> instance = new ArrayList<>();
        boolean[] visited = new boolean[n];
        Map<Integer, List<int[]>> temp = new HashMap<>();
        PriorityQueue<int[]> check = new PriorityQueue<>((a, b) -> {
            return Integer.compare(a[1], b[1]);
        });
        
        for (int i = 0; i < n; i++) {
            instance.add(Integer.MAX_VALUE);
            visited[i] = false;
        }
        for (List<Integer> e : edges) {
            temp.putIfAbsent(e.get(0), new ArrayList<>());
            temp.putIfAbsent(e.get(1), new ArrayList<>());
            
            temp.get(e.get(0)).add(new int[] {e.get(1), e.get(2)});
            temp.get(e.get(1)).add(new int[] {e.get(0), e.get(2)});
        }
        
        instance.set(s - 1, 0);
        check.add(new int[]{s, 0});
        
        while (!check.isEmpty()) {
            int current = check.poll()[0];
            if (visited[current - 1]) continue;
            visited[current - 1] = true;
            
            for (int[] e : temp.get(current)) {
                if (visited[e[0] - 1]) continue;
                if (instance.get(e[0] - 1) > instance.get(current - 1) + e[1]) {
                    instance.set(e[0] - 1, instance.get(current - 1) + e[1]);
                    check.add(new int[]{e[0], instance.get(e[0] - 1)});
                }
            }
        }
        
        instance.remove(s - 1);
        for (int i = 0; i < instance.size(); i++) {
            if (instance.get(i) == Integer.MAX_VALUE) instance.set(i, -1);
        }
        return instance;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

                int n = Integer.parseInt(firstMultipleInput[0]);

                int m = Integer.parseInt(firstMultipleInput[1]);

                Set<List<Integer>> edges = new HashSet<>();

                IntStream.range(0, m).forEach(i -> {
                    try {
                        edges.add(
                            Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                                .map(Integer::parseInt)
                                .collect(toList())
                        );
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                });

                int s = Integer.parseInt(bufferedReader.readLine().trim());
                List<List<Integer>> listEdges = new ArrayList<>();
                listEdges.addAll(edges);
                List<Integer> result = Result.shortestReach(n, listEdges, s);

                bufferedWriter.write(
                    result.stream()
                        .map(Object::toString)
                        .collect(joining(" "))
                    + "\n"
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
