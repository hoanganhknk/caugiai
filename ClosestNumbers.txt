import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static List<Integer> closestNumbers(List<Integer> arr) {
    // Write your code here
        int mini = Integer.MAX_VALUE;
        Collections.sort(arr);
        List<Integer> ans = new ArrayList<>();
        for(int i=0 ; i<arr.size()-1 ; i++) {
            if( arr.get(i+1) - arr.get(i) < mini ) {
                mini = arr.get(i+1) - arr.get(i);
                ans.clear();
                ans.add(arr.get(i));
                ans.add(arr.get(i+1));
            }
            else if( arr.get(i+1)-arr.get(i) == mini ) {
                ans.add(arr.get(i));
                ans.add(arr.get(i+1));
            }
        }
        return ans;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.closestNumbers(arr);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining(" "))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
